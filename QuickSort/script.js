function quickSort(array, left, right) {

    // Условие проверяет, нужно ли продолжать сортировку, иначе она завершится
    if (left < right) {

        //Вызывается функция partition для определения индекса опорного элемента (pivot) и сохранения его индекса
        let pivotIndex = partition(array, left, right);

        // Рекурсивный вызов quickSort для сортировки левой части массива относительно опорного элемента
        quickSort(array, left, pivotIndex - 1);

        // Рекурсивный вызов quickSort для сортировки правой части массива относительно опорного элемента
        quickSort(array, pivotIndex + 1, right);
    }
}

// Объявление функции partition для определения индекса опорного элемента и разделения массива на две части
function partition(array, left, right) {

    // Задание опорного элемента, который выбран как последний элемент в текущем подмассиве
    let pivot = array[right];

    // Инициализация переменной i для отслеживания местоположения опорного элемента
    let i = left;


    // Цикл проходит через подмассив, сравнивая каждый элемент с опорным
    for (let j = left; j < right; j++) {

        // Проверка, если элемент меньше опорного
        if (array[j] < pivot) {

            // Обмен значениями элементов, чтобы элементы меньшие опорного оказались слева от него
            [array[i], array[j]] = [array[j], array[i]];

            // Увеличение i для следующего возможного элемента
            i++;
        }
    }

    // Перемещение опорного элемента на правильное место в массиве
    [array[i], array[right]] = [array[right], array[i]];

    // Возвращение индекса опорного элемента
    return i;

}

// Создание массива для сортировки
let array = [4, 2, 7, 1, 9, 3];

// Вызов функции быстрой сортировки
quickSort(array, 0, array.length - 1);


// Вывод отсортированного массива через пробел
console.log(array.join(" "));